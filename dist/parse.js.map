{"version":3,"sources":["../lib/parse.js"],"names":["request","require","jsyaml","fs","toKey","iconId","replace","url","console","log","get","error","response","body","parsedYaml","load","unordered","icons","entry","id","ordered","Object","keys","sort","forEach","key","writeFile","JSON","stringify","err","res"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;;AACA,IAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAAUC,MAAV,EAAkB;AAC9B,SAAOA,MAAM,CAACC,OAAP,CAAe,IAAf,EAAqB,EAArB,CAAP;AACD,CAFD;;AAIA,IAAMC,GAAG,GAAG,+EAAZ;AACAC,OAAO,CAACC,GAAR,CAAY,uBAAuBF,GAAnC;AACAP,OAAO,CAACU,GAAR,CAAYH,GAAZ,EAAiB,UAACI,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AAC1C,MAAIF,KAAJ,EAAW;AACTH,IAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACA;AACD;;AACD,MAAIC,QAAJ,EAAc;AACZJ,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBG,QAA5B;AACD;;AAED,MAAME,UAAU,GAAGZ,MAAM,CAACa,IAAP,CAAYF,IAAZ,CAAnB;AACA,MAAMG,SAAS,GAAG,EAAlB;AAV0C;AAAA;AAAA;;AAAA;AAW1C,yBAAkBF,UAAU,CAACG,KAA7B,8HAAoC;AAAA,UAA3BC,KAA2B;AAClCF,MAAAA,SAAS,CAAEZ,KAAK,CAACc,KAAK,CAACC,EAAP,CAAP,CAAT,GAA+BD,KAAK,CAACC,EAArC;AACD;AAbyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe1C,MAAMC,OAAO,GAAG,EAAhB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYN,SAAZ,EAAuBO,IAAvB,GAA8BC,OAA9B,CAAsC,UAAUC,GAAV,EAAe;AACnDL,IAAAA,OAAO,CAAEK,GAAF,CAAP,GAAiBT,SAAS,CAAES,GAAF,CAA1B;AACD,GAFD;AAIAjB,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACAN,EAAAA,EAAE,CAACuB,SAAH,CAAa,uBAAb,EAAsCC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAtC,EAA+D,MAA/D,EAAuE,UAAUS,GAAV,EAAeC,GAAf,EAAoB;AACzF,QAAID,GAAJ,EAAS;AACPrB,MAAAA,OAAO,CAACG,KAAR,CAAckB,GAAd;AACD,KAFD,MAEO;AACLrB,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD;AACF,GAND;AAQAD,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAN,EAAAA,EAAE,CAACuB,SAAH,CAAa,qBAAb,EAAoC,uBAAuBC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAvB,GAAiD,GAArF,EAA0F,MAA1F,EAAkG,UAAUS,GAAV,EAAeC,GAAf,EAAoB;AACpH,QAAID,GAAJ,EAAS;AACPrB,MAAAA,OAAO,CAACG,KAAR,CAAckB,GAAd;AACD,KAFD,MAEO;AACLrB,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD;AACF,GAND;AAOD,CArCD","sourcesContent":["const request = require('request')\nconst jsyaml = require('js-yaml')\nconst fs = require('fs')\n\nconst toKey = function (iconId) {\n  return iconId.replace(/-/g, '')\n}\n\nconst url = 'https://raw.githubusercontent.com/FortAwesome/Font-Awesome/fa-4/src/icons.yml'\nconsole.log('> load icons from ' + url)\nrequest.get(url, (error, response, body) => {\n  if (error) {\n    console.error(error)\n    return\n  }\n  if (response) {\n    console.log('> received ' + response)\n  }\n\n  const parsedYaml = jsyaml.load(body)\n  const unordered = {}\n  for (let entry of parsedYaml.icons) {\n    unordered[ toKey(entry.id) ] = entry.id\n  }\n\n  const ordered = {}\n  Object.keys(unordered).sort().forEach(function (key) {\n    ordered[ key ] = unordered[ key ]\n  })\n\n  console.log('write to lib/fa-constants.json')\n  fs.writeFile('lib/fa-constants.json', JSON.stringify(ordered), 'utf8', function (err, res) {\n    if (err) {\n      console.error(err)\n    } else {\n      console.log('[done] written to lib/fa-constants.json')\n    }\n  })\n\n  console.log('write to lib/fa-constants.js')\n  fs.writeFile('lib/fa-constants.js', 'export const fa = ' + JSON.stringify(ordered) + ';', 'utf8', function (err, res) {\n    if (err) {\n      console.error(err)\n    } else {\n      console.log('[done] written to lib/fa-constants.json')\n    }\n  })\n})\n"],"file":"parse.js"}